+ Django
 : 파이썬으로 만들어진 무료 오픈소스 웹 어플리케이션 프레임워크
 : 쉽고 빠르게 웹 어플리케이션을 개발할 수 있도록 돕는 웹 프레임워크
   (Full Stack Framework)

cf) Flask : micro framework

> 장고 프로젝트
 - django-admin startproject <프로젝트 이름>
 - 프로젝트에는 여러 개의 app을 만들 수 있음

> MTV (Model Template View) 개발 방식
 - M (Model : models.py)  : DBMS 내용
    : 장고에서 하나의 모델은 하나의 클래스로 나타낸다.
      클래스 내부에 데이터의 이름과 데이터 형태를 정의
  [자료형]
   1) CharField : 문자열 정의
                : 옵션 (max_length : 문자열 최대 길이) | max_lengh를 적지 않으면 None처리 (무제한)

   2) DateField : 날짜 양식에 맞게 저장되는 데이터 타입
                : default - python datatime 라이브러리 기준

   3) EmailField : 이메일 형식을 가지는 데이터 타입
                 : EmailValidator 를 통해 입력되는 문자열이 이메일 형식인지를 자동으로 체크

   4) FileField : 파일을 저장할 수 있는 데이터 타입
                : 실질적으로 저장되는 것은 파일의 이름

   5) TextField : CharField와 거의 같음. 글자 수 제한이 더 크다.
   6) IntegerField : 숫자를 저장하는 데이터 타입
   7) BooleanField : 참/거짓을 저장하는 데이터 타입

  [sqlite]
   : PRAGAMA
     컬럼순서  |  이름   |  자료형  | notnull여부 (1/0) | pk여부  (1/0)   # 1이 True, 0이 false


 - T (Template - HTML) : 사용자에게 보여줄 화면 관련 (templates directory)


    [Django 템플릿 엔진]
     : DTL(Django Template Language) – 장고의 코어 템플릿 엔진

    [Django 템플릿 문법]
     ᆞ변수 : {{ 변수 }}   # 변수명은 영문자, _(under bar)로 구성. 공백, 특수문자 사용 X
             . 은 변수의 속성에 접근할 때 사용.
             . 조회 순서 – 딕셔너리조회 => 속성조회 => 메소드호출 => 리스트의 인덱스 조회
             필터 사용 가능. ( | 뒤가 필터) 60개쯤 됨
               ex) {{ name | lower }} – name 변수에 lower를 적용시켜서 결과를 소문자로 출력
                  {{ text | escape | linebreaks }} – 텍스트를 escape하고, 개행함
    ᆞ태그 : 어떤 태그는 텍스트를 생성, 어떤 태그는 로직 수행 등 기능이 있는 태그
           : 기본형태 {% tag %} 태그 내용 {% endtag %}
         ⅰ) for 반복문
           <ul>
              {% for user in users: %}
              <li> {{ user }} </li>
              {% endfor %}
    </ul>
         ⅱ) if 조건문
           {% if users %}
              users : {{ users | length }}
           {% else %}
              user가 없어요
           {% endif %}
         ⅲ) block(막기), extends(탬플릿상속), include(탬플릿, 변수 등 가져오기), …


 - V (View : views.py) : Logic 관련

> 주요 파일
 - settings.py : 설정 관련
 - urls.py : URLConf (URL과 view를 mapping)

 - models.py : DBMS 관련 (default : ORM 방식)
  : 여기에 정의된 모델(데이터베이스 테이블)은 migrate 명령을 통해 실제 데이터베이스에 적용
  : migrate 명령
   1) 모델을 변경 - 필요한 테이블, 컬럼, 데이터타입등을 작성
   2) python manage.py makemigrations <앱명> - 일종의 설계도
   3) python manage.py migration <앱명>

  [Django 모델 API] - 데이터를 추가/갱신/조회 --> 함수를 쓰면 알아서 SQL동작
  1) insert : 객체 생성 후에 save() 함수를 이용하여 새 객체를 insert
  2) select : Django 모델 클래스는 objects라는 Manager 객체를 자동으로 추가함.
              이 Manager 객체를 통해 여러 기능을 사용 할 수 있음.
     - all() : table data 전체
     - get() : 하나의 row를 가져옴
               ex) Promary key로 찾아올 경우(ToDo.objects.get(pk = 1))
     - filter() : 특정 조건을 사용하여 row를 가져오는 메소드
     - exclude() : 특정 조건을 제외한 나머지 row를 가져오는 메소드
     - count() : 데이터 개수(row수)를 세어주는 메소드
     - order_by() : 데이터를 특정 컬럼에 따라 정령함. 인수로 컬럼을 사용
        ex) ToDo.objects.order_by(‘id’)   # default : 오름차순
           ToDo.objects.order_by(‘-id’)   # - : 내림차순
           ToDo.objects.order_by(‘-id’, ‘content’)   # n차 정렬도 가능
     - distinct() : 중복 제거하는 메소드
     - first() : 여러 개의 데이터 중에서 처음에 있는 row를 가져오는 메소드
        ex) ToDo.objects.order_by(‘content’).first()
     - last() : 여러 개의 데이터 중에서 마지막 row를 가져오는 메소드
     - 이 메소드들은 쿼리 표현식(QuerySet)으로 리턴하므로 함수를 체이닝 방식으로 사용 가능
  3) update : 수정할 row 객체를 얻은 후 변경할 필드를 수정. 기본적으로 업데이트X, 덮어씌우기
              수정은 save() 함수로 갱신
  4) delete : 삭제할 row 객체를 얻은 후 delete()로 삭제

 - views.py : 화면 처리 로직, business 로직
 - admin.py : app admin 처리










