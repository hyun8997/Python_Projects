[210419]
파이선 GUI 프로그래밍을 위한 프레임워크 (ToolKit)
  # 파이선에서 기본적으로 제공되는 표준 라이브러리
   > Tkinter(Tk interface)
    - Tcl(Tool Command Language)
    - Tk (크로스 플랫폼에 쓰이는 GUI 툴킷)
    - Tcl/Tk를 파이선에서 사용할 수 있도록 한 LightWeight GUI 모듈

   > PyQt
    : 파이썬에서 Ot(The Qt Company) 프레임워크를 사용하도록 한 툴킷
      (주의 - 오픈소스이지만 상업용으로 사용할 경우 라이선스 구매해야 함)
   > Pyside
   > PyGTK

  # 자주 사용하는 라이브러리 : wxPython 라이브러리
  
  
주요 위젯
1) 라벨, 버튼 위젯
  # tkinter 패키지는 위젯 없을 때는 기본 크기를 사용
  # 위젯을 추가할 경우 일반적으로 위젯을 표시하는데 필요한 만큼의 공간을 사용하도록 최적화
  윈도우창 크기 설정, win.geometry
  
2) 버튼 위젯
  cf) tk를 이용한 위젯
  
    Grid
      label.grid(column=0, row=0) --> label.pack()  대신 지정위치로
      chkBtn1.grid(column=0, row=0, sticky=tk.W) # stricky : center가 없는 옵션
      chkBtn2.grid(column=1, row=0, sticky='W')

    이벤트 처리
      button = ttk.Button(win, text='click', command=clickMe)  

3) Entry 위젯 : 단순한 라인 텍스트 박스
  # entry 위젯 parameter
   - show  ex) (None | '*')
   - textvariable : 입력박스(텍스트 박스)에 작성한 문자열을 가져올 변수
   - justify : 입력박스의 문자열이 여러 줄일 경우 정렬 방법 (left, right, center - default는 center)

  # 파이선은 동적 타입 언어 (할당된 데이터를 바탕으로 타입을 유추)
    예를 들어 name 변수에 문자열을 할당하면 string 타입이 됨 (name='hong')
              age 변수에 정수를 할당하면 integer 타입이 됨 (age=20)

  # ttk은 파이선이 아닌 다른언어로 되어있는 모듈임. 단지 파이선에서 사용할 수 있을 뿐.
    그러므로 파이선처럼 동적으로 타입을 유추하는 모듈이 아님.
    타입 지정이 필요한 언어임에 유의


[210420]
위젯 파라미터 (tkinter 기준)
  # 문자열 설정 파라미터
   - text : 표시할 문자열
   - textvariable : 표시할 문자열을 가져올 변수
   - anchor : 위젯의 문자열 또는 이미지의 위치 지정(default : center)
   - justify : 문자열이 여러줄일 경우 정렬 방법 (default : center)
   - wraplength : 자동 줄 내림 설정 - 너비 (default : 0)

  # 모양 설정 파라미터
   - width : 너비
   - height : 높이
   - relief : 테두리 모양 (default : flat)
   - overrelief : 마우스 오버시 테두리 모양 (default : raised)
     -- relief option (flat, groove, ridge, solid, sunken)
   - background (a.k.a bg) : 백그라운드 색상을 지정 (default : SystemButtonFace)
   - foreground (a.k.a fg) : 문자열의 색상
   - select color : 선택된 위젯의 배경 색
   - padx(가로 안쪽 여백), pady(세로 안쪽 여백)

  # 상태 설정 파라미터
   - state : 상태 설정 (default : normal) -> (normal, active, disabled)
   - command : active 상태일 때 실행하는 메소드(함수)를 지정
   - variable : 동작상태를 저장할 제어 변수 (ex. tkinter.StringVar(), tkinter.IntVar())
   - onvalue : active(체크) 상태일 때 연결된 제어변수의 값 (default : True)
   - offvalue : 해제 상태일 때 연결된 제어변수의 값 (default : false)
 
 
4) CheckButton 위젯
  다중 선택 가능
  # 체크버튼의 메소드
   - select() : 체크 상태
   - deselect() : 해제 상태
   - toggle() : 토글
   - invoke() : 체크버튼 실행
   - flash() : 깜빡거림

  # 체크버튼의 형식 설정
   - bitmap : 체크버튼에 포함할 기본 이미지
   - image : 체크버튼에 포함할 임의의 이미지
   - selectimage : 체크버튼이 체크 상태일 때 표시할 임의의 이미지
   - compound : 체크버튼에 문자열과 이미지를 동시에 표시할 때 이미지의 위치 (default : none)
              : button, center, left, right, top
   - font : 체크버튼의 문자열 글꼴 설정
   - cursor : 체크버튼 마우스 커서 모양

5) ComboBox 위젯
  선택지 

6) RadioButton 위젯
  다중 선택지중 하나만 선택 가능, 변수 하나로 묶인 애들 중 택일

7) Text 위젯
  여러 줄의 문자열을 출력하기 위한 위젯, 텍스트 에어리어 같음
  Text 파라미터(tkinter 기준)
    [ 텍스트 텍스트 설정 parameter ]
    wrap	: 자동 줄 내림 설정(기본값 : char) - none, char, word)
    tabs	: 텍스트의 Tab 간격을 설정(기본값: 56)
    tabstyle	: 텍스트의 Tab 간격 형식(기본값: tabular) - tabular, wordprocessor
    startline	: 텍스트의 데이터 저장소에 저장될 시작 라인
    endline	: 텍스트의 데이터 저장소에 저장될 마지막 라인
    spacing1	: 텍스트의 상단 수직 간격(기본값: 0)
    spacing2	: 텍스트의 줄과 줄 사이 간격(기본값: 0)
    spacing3	: 텍스트의 하단 수직 간격(기본값: 0)

    [ 텍스트 형태 설정 parameter ]
    width		:
    height		:
    relief		:
    borderwidth = bd	:
    background = bg	:
    foreground = fg	:
    insertwidth	: 텍스트의 키보드 커서 너비 (기본값 : 2)
    insertborderwidth	: 텍스트의 키보드 커서 테두리 두께(기본값 : 0)
    insertbackgorund	: 텍스트의 키보드 커서 색상
    selectborderwidth	: 텍스트의 문자열 블록처리 테두리 두께
    selectbackground	: 텍스트의 문자열 블록처리 배경 색상
    selectforeground	: 텍스트의 문자열 블록처리 문자열 색상	
    inactiveselectbackground	:
    padx, pady 	: 안쪽 여백

    [ 텍스트 형식 설정 parameter ]
    font		: 텍스트의 문자열 글꼴 설정
    cursor		: 텍스트의 마우스 커서 모양
    xscrollcommand	: 텍스트의 가로 스크롤 객체 적용(Scrollbar위젯.set)
    yscrollcommand	: 텍스트의 세로 스크롤 객체 적용(Scrollbar위젯.set)
    exportselection	: 텍스트의 선택 항목 여부 설정(기본값 : True)
    segrid		: 텍스트의 격자 크기 조정 설정(기본값 : False)

    [ 텍스트 하이라이트 설정 parameter ]
    highlightcolor		: 텍스트가 선택되었을 때 색상
    highlightbackground		: 텍스트가 선택되지 안았을 때 색상
    hightlightthickness		: 텍스트가 선택되었을 때 두께

    [ 텍스트 동작 설정 parameter ]
    takefocus		: Tab키를 이용해서 위젯 이동 허용 여부 (기본값 : False)
    blockcursor	: 텍스트의 키보드 커서를 블록으로 사용(기본값 : False)
    undo		: 텍스트의 실행 취소 사용 여부(기본값 : False)
    maxundo		: 텍스트의 실행 취소 최대 횟수
    autoseparators	: 텍스트의 실행 취소 자동 저장 여부(기본값 : True)

  Text의 문자열 메소드
    insert(index, "문자열")문자열 삽입
    : index 위치에 문자열을 삽입

    delete(start_index, end_index) 문자열 삭제  
    : start_index부터 end_index까지의 문자열 삭제

    get(start_index, end_index) 문자열 반환
    : start_index부터 end_index까지의 문자열 반환

    index(index) 인덱스 반환
    : index가 음수 일 경우, 1.0으로 반환

    see(index) 문자열 표시 반환
    : index위치에 텍스트가 표시되면 True반환

    ** index는 y.x 로 사용 : y줄 x번째 문자를 의미함
    : 첫번째 줄 첫번째 문자 ==> 1.0

  Text 마크 메소드
    tag_add(tagname, start_index, end_index) 태그생성
    : start_index부터 end_index까지의 tagname을 생성

    tag_remove(tagname, start_index, end_index) 태그제거
    : start_index부터 end_index까지의 tagname을 설정 제거

    tag_delete(tagname) 태그삭제
    :tagname의 설정 및 선언 삭제

    tag_config(tagname, 파라미터1, 파라미터2, ..... )
    : tagname의 범위 만큼 속성 설정

8) ScrolledText 위젯
  Text 위젯을 구현하면서 스크롤 기능을 추가한 위젯

9) Frame 위젯
  공간 분리할 때 사용
  Frame 파라미터
    [ 형태 설정 ]
    width		: 프레임 너비
    height		: 프레임 높이
    relief		: 프레임 테두리 모양
    background = bg	: 프레임 배경 색상
    padx		: 프레임의 테두리와 내용의 가로 여백(기본값 : 1 )
    pady		: 프레임의 테두리와 내용의 세로 여백(기본값 : 1 )

    [ 형식 설정 ]
    cursor		: 프레임의 마우스 커서 모양
    class_		: 클래스 설정
    visual		: 시각적 정보 설정
    colormap		: 256 색상을 지정하는 색상 맵 설정

    [ 하이라이트 설정 ]
    highlightcolor
    highlightbackground
    highlightthickness

    [ 동작 설정 ]
    takefocus
    container		: 응용프로그램이 포함될 컨테이너로 사용 여부(기본값 : False)

10) ScrollBar 위젯
  # 스크롤바 객체를 생성해서 적용할 위젯에 연결하는 형태로 사용
  # 스크롤바와 연결된 위젯과는 서로 다른 객체이므로 프레임을 활용하여 사용 
  Scrollbar 파라미터(tkinter 기준)
    width		: 기본값은 17
    relief		: 스크롤바의 테두리 모양(기본값: flat)
    borderwidth
    background = bg
    elementborderwidth	: 스크롤 요소의 테두리 두께(기본값: -1)
    orient		: 스크롤의 표시방향(기본값: vertical) - vertical, horizontal	

  Scrollbar 형식 설정
    cursor		: 스크롤바의 마우스 커서 모양

  Scrollbar 상태 설정
    activebackground	: active상태일 때 스크롤바의 배경 색상
    activerelief	: active상태일 때 스크롤바의 테두리 모양

  Scrollbar 하이라이트 설정
    hightlightcolor	:
    hightlightbackground
    hightlightthickess	:

  Scrollbar 동작 설정
    tabkefocus
    command
    jump		: 스크롤이 동작할 때 마다 command callback 호출(기본값 : False)
    repeatdelay	: 버튼이 눌러진 상태에서 command 실행까지의 대기시간(기본값 : 300 ms)
    repeatinterval	: 버튼이 눌러진 상태에서 command 실행의 반복시간(기본값 : 100 ms)

  Scrollbar 메소드
    set			: 스크롤 부착 - 위젯에 스크롤바를 적용
    set(좌측상단, 우측하단)	: 스크롤 부착
    get			: (좌측상단, 우축하단)좌표를 리턴 - 현재 스크롤ㄹ바의 좌측상단 좌표와 우측하단 좌표를 리턴

11) Listbox 
  Listbox파라미터
    [ 문자열 설정 ]
    listvariable	: 리스트박스에 표시할 문자열을 가져올 변수

    [ 형태 설정 ]	
    width
    height
    relief
    borderwidth
    background
    foreground
    selectbackground	: 리스트박스 항목의 블록처리 배경 색상
    selectforeground	: 리스트박스 항목의 블록처리 문자열 색상
    selectborderwidth	: 리스트박스 항목의 블록 테두리 두께(기본값 : 0)

    [ 형식 설정 ]
    font		: 리스트박스의 문자열 글꼴 설정
    cursor		
    xscrollcommand	: 리스트박스의 가로스크롤 위젯 적용
    yscrollcommand	: 리스트박스의 세로스크롤 위젯 적용
    setgrid		: 리스트박스의 격자 크기 조정 설정 (기본값 : False)
    exportselection	: 리스트박스간의 항목 선택 유지(기본값 : True)

    [ 상태 설정 ]
    state		: normal, readonly, disabled
    disabledforeground	: disabled 상태일 때 리스트박스의 문자열 색상

    [ 하이라이트 설정 ]
    highlightcolor	: 리스트박스가 선택되었을 때 색상	
    highlightbackground : 리스트박스가 선택되지 않았을 때 색상
    highlightthickness	: 리스트박스가 선택되었을 때 두께

    [ 동작 설정 ]
    takefocus		:
    activestyle	: 리스트박스의 선택된 항목의 표시형택(기본값 : underline) -none, dotbox, underline
    selectmode	: 리스트박스의 항목 선택 방법(기본값 : browse) - browse, single, multiple, extended


  Listbox 메소드
    insert(index, "항목")		: index 위치에 항목을 추가
    delete(index)		: 단일 항목을 삭제
    delete(start_index, end_index)	: start_index부터 end_index까지의 항목 삭제
    size()			: 항목 개수 반환
    activate(index)		: index 위치의 항목을 선택
    curselection()		: 선택된 항목을 튜플로 리턴
    get(start_index, end_index)	: start_index부터 end_index까지의 항목을 튜플로 반환
    index(index)		: index에 대응하는 위치 획득
    nearest(index)		: 현재 보이는 리스트박스의 항목 중 index에 가장 가까운 값을 반환
    see(index)			: index가 보이도록 리스트박스의 위치조정
    xview()			: 가로 스크롤 연결
    xview_scroll(num, str)	: 가로 스크롤의 속성 설정
    xview_moveto(num)		: 가로 스크롤 이동(0~1)
    yview()			: 세로 스크롤 연결
    yview_scroll(num, str)	: 세로 스크롤 속성 설정
    yview_moveto(num)		: 세로 스크롤 이동(0~1)


> thread (비동기 프로그래밍)
  # 비동기 프로그래밍 : 서로 간섭없이 독립적으로 작업을 진행할 수 있도록 하는 프로그래밍 기법
                     : 이를 위해 파이선은 Thread 를 지원
  # 파이선이 지원하는 쓰레드 사용 모듈 : _thread, threading

  threading module
    # threading.Thread() 객체를 호출
    # Thread(target=쓰레드진입점, args=전달할인자(튜플형태))
                               , kwargs=전달할인자{딕셔너리형태})
    # 쓰레드 동작
    # 쓰레드 


Scraping 스크래핑 - 크롤링과 조금 다름
  text : HTML 코드 전부를 return
    text 속성은 한글 encoding issue가 생길 수 있음
  content 속성 : 한글을 바이너리 형태로 return
    코드화 시켜서 return
    이 속성으로 작업하는 것을 더 권장
  인코딩 확인 res.encoding


주소창 parameter 처리 : 데이터 보내기
  1) 직접 접근 가능
    url = 'https://ko.wikipedia.org/wiki/파이선?key1=value1&key2=value2'
    res = rq.get(url)
  2) params 속성을 통한 접근
    url = 'https://ko.wikipedia.org/wiki/파이선'
    res = rq.get(url, params={'key1':'value1', 'key2':'value2'})
  3) json을 통한 접근
    import json
    url = 'http://example.com'
    res = rq.post(url, data=json.dumps({"key1":"value1", "key2":"value2"}))
        파이선은 따옴표를 붙이기만 하면 문자열이나 다른 언어에서 대부분 쌍따옴표가 문자열
        ==> 호환성을 위해 json을 dict보다 권장
    딕셔너리 형태로 유지되면서 문자열로 바꾸는 결과는 큰따옴표로 결과값이 나와야 함
    일반 문자열로 표현되는 결과(str())는 작은 따옴표로 나오므로 에러가 발생할 수 있음
    그래서 언제나 큰 따옴표로 나오는 json을 권장


에러 처리
  url에 http 또는 https를 명시하지 않으면 에러가 발생  MissingSchema
  1) requests의 exceptions 객체를 사용해서 try-except로 에러 잡기
  2) urllib module 사용 : request 기반, 개선된 모듈, 보기 편하게 출력쉬움
    page.read() # urllib 모듈은 read()를 통해 binary 데이터읽어옴 => 보내는 것도 바이너리로 보내야 함
    post 요청 : Request 객체 이용시 두 번째 인자가 있으면 post로 인식, 없으면 get | 세 번째 인자는 headers
    get 요청 : 두 번쨰 인자 없다 표시 -> None

  urllib으로 잘못된 주소를 요청하면 에러발생, requests는 404코드만 뜸


  requests 와 urllib
  1. url을 통한 요청 시 요청 객체를 생성하는 방법에 차이 있음
      requests는 함수로, urllib는 객체를 만들고 함수로
  2. 데이터 전송 시 requests는 딕셔너리, urllib는 인코딩하여 바이너리 형태로 전송(권장)
  3. requests를 통한 요청 형태는 (get, post)를 명확이 적시
     urllib를 통한 요청 형태는 Request() 안의 인자 여부로(두 번째 인자의 유무)
  4. 페이지 주소의 오류가 있을 경우 urllib는 다 에러를 발생시키고 에러코드를 띄워줌
     requests는 404








































-----------------------------------------------------------------------------------------------------------------------------------------------------
[210419]
<GUI>
ToolKit.ipynb                     주요 위젯 - 라벨(1), 버튼(2), entry(3) 위젯, 이벤트 처리, grid를 통한 pack
toolkit_exam.ipynb                과제 - 구구단, 로또
[210420]
<GUI>
ToolKit2.ipynb                    위젯 파라미터 (tkinter 기준), CheckButton(4), ComboBox(5), RadioButton(6) 위젯
ToolKit3.ipynb                    Text(7), ScrolledText(8), Frame(9), ScrollBar(10) 위젯
threadEx.ipynb                    쓰레드 동작 2가지 - _thread, threading
                                  스크래핑?
[210421]
<Scraping>
scrapEx01.ipynb                   url 받아오기, 쿠키 받아오기
scrapEx02.ipynb                   requests의 text, content, encoding 속성(위 설명 확인)
                                  주소창 parameter 처리
                                  에러처리 - try-except, urllib모듈



























