a = []
b = [1, 2, 3]
c = ['wow', 'python']
d = [1, 2, 'wow']
e = [1, 2, ['wow', 'python']]

print(a, b, c, d, e)

'''
리스트
a처럼 아무것도 포함하지 않는, 비어있는 리스트 일 수도 있고
b처럼 숫자를 요소값으로 가지거나
c:문자열 요소
d:문자열 + 숫자 요소
e:리스트 자체를 요소 값으로 가질 수 있음
즉, 리스트 안에는 어떠한 자료형도 포함시킬 수 있음.
'''

print('------------------------------------------------------')
# 리스트 인덱싱 - 문자열처럼 인덱싱 가능
print(b[0])  # 리스트도 인덱스 번호는 0번 부터
print(b[-1])  # 뒤에서부터 찾아올 수 있음

print('------------------------------------------------------')
# 리스트 슬라이싱
f = [1, 2, 3, 4, 5, 6, 7]
print(f[0:2])

print('------------------------------------------------------')
# 리스트 요소끼리 연산도 가능
print(b[0] + b[2])
#print(b[1] + 'hi')  # 자료형이 다르면 에러
print(d[2] + 'hi')
print(str(b[1]) + 'hi')  # 숫자형을 문자열로 바꿔서 연산

# 리스트 반복
print(b * 3)  # [1, 2, 3, 1, 2, 3, 1, 2, 3]
#print('='*30)  # 의사코딩

print('------------------------------------------------------')
# 리스트 수정, 변경, 삭제

# 하나의 값 수정
a = [10, 20, 30]

a[1] = 15  # 덮어 씌움

print(a)

# 연속된 범위의 값 수정
a[1:2] = ['wow', 'fantastic', 'python']  # 연속된 공간이 확장되면서 들어감

print(a)  # [10, 'wow', 'fantastic', 'python', 30]

# 주의
# 연속된 범위값 수정하는 것과 인덱스를 수정하는 것은 전혀 다름
# 상황에 따라 수정하는 방식 결정
b[1] = ['wow', 'fantastic', 'python']

print(b)  # [1, ['wow', 'fantastic', 'python'], 3]

print('------------------------------------------------------')
# 리스트 요소 삭제
c = [10, 20, 30]

#c[1] = []  # [10, [], 30]
c[1:2] = []  # [10, 30] => 삭제는 이렇게 해야 함

print(c)

# 리스트 요소 삭제2 - del 구문
d = [10, 20, 30]

del d[1]
print(d)

print('------------------------------------------------------')





















