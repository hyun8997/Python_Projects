+ 파이썬
1.	직관적인 언어이다.
    ex) if 4 in [1, 2, 3, 4]
2.	문법이 쉽기 때문에 빠르게 배울 수 있다.
3.	오픈 소스이고 강력하다.
4.	간결하다(의사코드?).
5.	개발 속도가 빠르다.

+ 파이썬을 이용한 개발
1.	시스템 유틸리티 개발
    : 파이썬은 운영체제의 시스템 명령어들을 이용할 수 있는 각종 도구들을 갖추고 있음
2.	GUI 프로그래밍 지원
3.	C/C++ 와의 결합
    : 파이썬을 접착(Glue) 언어라고도 부름
4.	웹 프로그래밍
5.	데이터 베이스 프로그래밍
6.	수치 연산 프로그래밍
7.	데이터 분석, 사물 인터넷

+ 파이썬과 잘 어울리지 않는 개발
1.	시스템과 밀접한 프로그래밍 영역
    : 운영체제, 대단히 많은 횟수의 반복과 연산을 필요로 하는 프로그램, 데이터 압축 알고리즘 프로그램에는 어울리지 않음
    : 즉, 대단히 빠른 연산 속도를 요구하거나 하드웨어를 직접 건드려야 하는 프로그램에는 어울리지 않음
2.	모바일 프로그래밍

+ 자료형
> 기본 자료형
 - 정수형
 - 긴 정수형(long integer) : 파이선 3.x 부터 사라지고 정수형의 범위가 무제한으로 늘어남
 - 부동 소수점수형(floating-point)
 - 문자형
 - 유니코드 문자형
 - 함수형

> 집합형 자료형 -> 일종의 배열
 - 리스트형 
 - 튜플형
 - 딕셔너리형
 - 집합형

> 사용자 정의형도 가능 (파이선이 객체 지향 언어 장점을 취하고 있음)

















----------------------------------------------------------------------------------------------------------------------------------------
[210412]
# 파이선은 동적 타이핑 (dynamically typed) 언어
: 변수가 아닌 값이 타입을 가지고 있다. ==>  value가 타입을 정함
: 변수는 모든 값의 참조이다, 참조->숫자, 참조->문자 이런식

정수만 표현할 수 있는 수 -> 정수
소수점 이하도 표현할 수 있는 수 -> 실수

대게 수를 다룰 때 정수만 사용하면 결과도 정수로, 실수를 사용하면 결과도 실수로 나옴

# 문자열 format code
 - %s : 문자열(string)
 - %c : 문자 1개 (character)
 - %d : 정수 (integer)
 - %f : 부동소수 (floating-point)
 - %o : 8진수
 - %x : 16진수
 - %% : 문자 %

[210413]
# 조건문(분기문)    : 를 사용하고 들여쓰기로 코드블럭 인식
if 조건 :
    수행문장 1
    수행문장 2
    .
    .

=> 들여쓰기 중요 : 코드 블록을 구분해 주는 역할 (탭=스페이스바 4칸, python 2.x라면 혼용 안됨)
블록 - 콜론(:) 다음에 들여쓴 코드 블록
     - 같은 실행 흐름에서 순서대로 실행되는 코드 덩어리
     - 여러 줄로 작성이 가능, 여러 줄일 경우, 들여쓰기 칸 수가 모두 같아야 함
블록을 끝내려면 들여쓰기를 끝내줘야 함 - 내어쓰기
한번이라도 내어 쓴 블록은 끝난 블록이 되고, 다시 열 수 없음

# 반복문
for i in range(1, 11):
    print('for 반복문', i)

range() : 숫자 리스트를 자동으로 만들어 주는 함수

end : 입력인수이며, 옆으로 print시 무엇을 붙일지 
print(i, end=' ')  

break : break 붙어 있는 가장 가까운 반복문을 탈출
continue : 이번만 생략


# 리스트
a = []
b = [1, 2, 3]
c = ['wow', 'python']
d = [1, 2, 'wow']
e = [1, 2, ['wow', 'python']]

a처럼 아무것도 포함하지 않는, 비어있는 리스트 일 수도 있고
b처럼 숫자를 요소값으로 가지거나
c:문자열 요소
d:문자열 + 숫자 요소
e:리스트 자체를 요소 값으로 가질 수 있음
즉, 리스트 안에는 어떠한 자료형도 포함시킬 수 있음.

연속된 범위의 값 수정(슬라이싱)
a[1:2] = ['wow', 'fantastic', 'python']  # 연속된 공간이 확장되면서 들어감, [10, 'wow', 'fantastic', 'python', 30]
인덱스를 수정
b[1] = ['wow', 'fantastic', 'python']  # [1, ['wow', 'fantastic', 'python'], 3]







































----------------------------------------------------------------------------------------------------------------------------------------
[210412]
<basic> 경로
varEx.py                    파이선 동적 타이핑 언어 특징
numberEx.py                 자료형, **로 제곱 승 수, //로 몪 구하기 
[210413]
<basic> 경로
stringFunction.py           문자개수(count), 위치찾기(find), 위치찾기2(index,못찾으면 에러), 문자열 삽입(join)
                            소문자>대문자(upper), 대문자>소문자(lower), 공백지우기(strip, lstrip, rstrip) 
                            문자열바꾸기(replace), 문자열나누기(split)
ifBasic.py                  if문, 들여쓰기의 중요성->코드 블록, 논리 연산자(True, False)
                            콘솔로입력받기(input()), 
forBasic.py                 for 반복문, 반복문에 사용되는 range(a, b) : a이상 b미만
forBasic2.py                다중 반복문
whileBasic.py               while 반복문, 무한 루프 조심
breakEx.py                  반복문 중 break, continue
<list> 경로
listEx01.py                 리스트에 들어갈 수 있는 요소들, 리스트 인덱싱, 리스트 슬라이싱, 연산, 반복, 수정, 삭제(del)
listEx02.py                 리스트 관련 함수들
                            요소추가(append), 정렬(sort), 역정렬(reverse) 알파벳 역순(내림차순)이 아니고 있던 그대로의 역순서임에 유의
                            위치반환(index), 











































































































































