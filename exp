+ 파이썬
1.	직관적인 언어이다.
    ex) if 4 in [1, 2, 3, 4]
2.	문법이 쉽기 때문에 빠르게 배울 수 있다.
3.	오픈 소스이고 강력하다.
4.	간결하다(의사코드?).
5.	개발 속도가 빠르다.

+ 파이썬을 이용한 개발
1.	시스템 유틸리티 개발
    : 파이썬은 운영체제의 시스템 명령어들을 이용할 수 있는 각종 도구들을 갖추고 있음
2.	GUI 프로그래밍 지원
3.	C/C++ 와의 결합
    : 파이썬을 접착(Glue) 언어라고도 부름
4.	웹 프로그래밍
5.	데이터 베이스 프로그래밍
6.	수치 연산 프로그래밍
7.	데이터 분석, 사물 인터넷

+ 파이썬과 잘 어울리지 않는 개발
1.	시스템과 밀접한 프로그래밍 영역
    : 운영체제, 대단히 많은 횟수의 반복과 연산을 필요로 하는 프로그램, 데이터 압축 알고리즘 프로그램에는 어울리지 않음
    : 즉, 대단히 빠른 연산 속도를 요구하거나 하드웨어를 직접 건드려야 하는 프로그램에는 어울리지 않음
2.	모바일 프로그래밍

+ 자료형
> 기본 자료형
 - 정수형
 - 긴 정수형(long integer) : 파이선 3.x 부터 사라지고 정수형의 범위가 무제한으로 늘어남
 - 부동 소수점수형(floating-point)
 - 문자형
 - 유니코드 문자형
 - 함수형

> 집합형 자료형 -> 일종의 배열
 - 리스트형 
 - 튜플형
 - 딕셔너리형
 - 집합형

> 사용자 정의형도 가능 (파이선이 객체 지향 언어 장점을 취하고 있음)

+ 파이선 패키지
 - 도트(.)를 사용하여 파이선 모듈을 계측적(디렉토리 구조)로 관리할 수 있도록 해주는 것.
 - 파이선 패키지는 디렉토리와 파이선 모듈로 이루어져 있음

 - 공동 작업이나 유지 보수 등 여러 면에서 유리
 - 패키지 구조로 모듈을 만들면 다른 모듈과 이름이 겹치더라도 더 안전하게 사용이 가능













----------------------------------------------------------------------------------------------------------------------------------------
[210412]
# 파이선은 동적 타이핑 (dynamically typed) 언어
: 변수가 아닌 값이 타입을 가지고 있다. ==>  value가 타입을 정함
: 변수는 모든 값의 참조이다, 참조->숫자, 참조->문자 이런식

정수만 표현할 수 있는 수 -> 정수
소수점 이하도 표현할 수 있는 수 -> 실수

대게 수를 다룰 때 정수만 사용하면 결과도 정수로, 실수를 사용하면 결과도 실수로 나옴

# 문자열 format code
 - %s : 문자열(string)
 - %c : 문자 1개 (character)
 - %d : 정수 (integer)
 - %f : 부동소수 (floating-point)
 - %o : 8진수
 - %x : 16진수
 - %% : 문자 %

[210413]
# 조건문(분기문)    : 를 사용하고 들여쓰기로 코드블럭 인식
if 조건 :
    수행문장 1
    수행문장 2
    .
    .

=> 들여쓰기 중요 : 코드 블록을 구분해 주는 역할 (탭=스페이스바 4칸, python 2.x라면 혼용 안됨)
블록 - 콜론(:) 다음에 들여쓴 코드 블록
     - 같은 실행 흐름에서 순서대로 실행되는 코드 덩어리
     - 여러 줄로 작성이 가능, 여러 줄일 경우, 들여쓰기 칸 수가 모두 같아야 함
블록을 끝내려면 들여쓰기를 끝내줘야 함 - 내어쓰기
한번이라도 내어 쓴 블록은 끝난 블록이 되고, 다시 열 수 없음

# 반복문
for i in range(1, 11):
    print('for 반복문', i)

range() : 숫자 리스트를 자동으로 만들어 주는 함수

end : 입력인수이며, 옆으로 print시 무엇을 붙일지 
print(i, end=' ')  

break : break 붙어 있는 가장 가까운 반복문을 탈출
continue : 이번만 생략


# 리스트
a = []
b = [1, 2, 3]
c = ['wow', 'python']
d = [1, 2, 'wow']
e = [1, 2, ['wow', 'python']]

a처럼 아무것도 포함하지 않는, 비어있는 리스트 일 수도 있고
b처럼 숫자를 요소값으로 가지거나
c:문자열 요소
d:문자열 + 숫자 요소
e:리스트 자체를 요소 값으로 가질 수 있음
즉, 리스트 안에는 어떠한 자료형도 포함시킬 수 있음.

연속된 범위의 값 수정(슬라이싱)
a[1:2] = ['wow', 'fantastic', 'python']  # 연속된 공간이 확장되면서 들어감, [10, 'wow', 'fantastic', 'python', 30]
인덱스를 수정
b[1] = ['wow', 'fantastic', 'python']  # [1, ['wow', 'fantastic', 'python'], 3]


[210414]
for in : in 뒤에 쓰인 리스트 크기에 관계럾이 항상 모든 리스트에 대해 코드를 실행할 수 있음
for in list : 이미 리스트가 존재, 그 목록에서 값을 하나씩 꺼내서 쓰기만 하면 될 때
for in range : 횟수가 정해져 있거나 1씩 증가하는 숫자를 써야할 때 유용

print('{}번 : {}'.format(i, name))  # {}에 .format으로 데이터 넣어서 콘솔

데이터가 변동이 있을 경우 이에 따라 range()에 숫자를 변경하는 것은 불편
=> len()
for i in range(len(names)):
    name = names[i]
    print('{}번 : {}'.format(i + 1, name))

enumrate : 순서와 리스트 안의 값을 한번에 처리할 수있도록 해주는 함수, 변수 두 개를 받는 반복문을 만들어 낼 수 있어서 편리함
for i, name in enumerate(names):  # index번호, 인덱싱한 데이터 => 튜플
    print('{}번 : {}'.format(i + 1, name))


# 함수
: 코드 조각에 기능별로 이름을 붙인 것으로 해당 기능을 쉽게 쓸 수 있도록 도와주는 역할
: 반복되는 부분이 있을 경우, 추후에 호출될 가능성이 있을 경우 생성

함수 구조 - 결과값이 없는 함수
def 함수명(입력 인수):  # def(define)
    수행문장~
    ...
함수 구조 2 - 결과값이 있는 함수 (return)
def 함수명(입력 인수):
    수행문장~
    ...
    return 결과값
함수 구조 3 - 함수 입력값(매개변수)이 몇 개 인지 모를 경우
def 함수명(*입력변수명(
    <수행문장>
    return

내장함수 : import 하지 않고 즉시 사용 가능한 함수들
            : 주의 - 내장 함수명을 일종의 키워드로 간주 
            :      - 사용자(개발자)가 식별자 또는 사용자 정의 함수로 만들어서 사용


# 모듈
import math - 수학 기능
    파이(math.pi), 올림(math.ceil), 내림(math.floor), 반올림(round, 자주 쓰여서 기본내장함수)
import sys - 내 시스템에 접근하는 모듈
    print(sys.argv) -> ['C:/Users/goott7/PycharmProjects/goott_python/module/moduleEx01.py']
    sys.path - 어떤 환경에서 어떤 작업하는지 현재 환경 확인(pip으로 import 할 때 설정 오류 확인 등)
import os
    os.environ - 시스템의 정보를 딕셔너리 객체로 리턴
    os.getcwd() - 현재 작업 위치
    os.chdir - 디렉토리 변경
    os.system('dir') - 커멘드 창 명령어
    os.popen - 시스템 명령어를 수행한 결과값을 읽기모드의 파일 객체로 리턴
    os.mkdir(디렉토리명) - 디렉토리 생성
    os.rmdir(디렉토리명) - 디렉토리 삭제 (주의 - 디렉토리가 비어있어야 함)
    os.unlink(파일명) - 파일 삭제
    os.rename(src, dst) - src 이름 파일을 dst 이름으로 바꿈 
import shutil
    shutil.copy(src, dst) - src라는 이름으로 파일을 dst로 복사
import time
    time.time() : 초 단위로 리턴, 1970년 1월 1일 0시 0분 0초 기준으로 지난 시간 리턴
                : UTC(Universal Time Coordinated - 세계 협정 표준시) 기준

    time.localtime() : time.time()를 통해서 얻어온 실수값을 이용해서 년 월 일 시 분 초 형태로 바꿈
    > struct_time 시퀀스 객체 속성
        tm_year : 년도
        tm_mon : 월(1~12)
        tm_mday : 일
        tm_hout : 시간 (0~23)
        tm_min : 분
        tm_sec : 초
        tm_wday : 요일을 숫자로 표현 (월요일 : 0 ~ 일요일 : 6)
        tm_dat : 1월 1일부터 누적된 날짜를 나타냄(1~366)
        tm_isdst : 서머타임(일광절약 시간제 0, 1, -1)
    time.gmtime : UTC 기준의 현재 시간, 얘도 struct로 나옴
    time.asctime : 알아보기 쉬운 날짜와 시간을 반환
    time.ctime : asctime과 같음
    time.strftime : 시간을 나타내는 포맷을 지정해서 세밀하게 표현할 수 있는 함수
    > 형식 지정자 (포맷코드)
        %y 년도 축약(2021 -> 21), %Y (2021)
        %a 요일 축약(Sun, ...), %A (Sunday, ...)
        %b 월 축약, %B
        %c 날짜와 시간을 출력 (21/01/01 13:08:00)
        %d 날(day) - 01~31
        %H 24시간 표현 - 0~23
        %I 12시간 표현 - 01~12
        %j 누적날짜를 표현 - 001~366
        %m 월 - 01~12
        %M 분 - 01~59
        %P 오전/오후 - AM/PM
        %S 초 - 00~60
        %U 누적 주 - (일요일 시작 : 00~53)
        %w 요일 - 0~6
        %W 누적 주 - (일요일 시작 : 00~53)
        %x 날짜 출력 - 21/01/01
        %X 시간 출력 - 13:01:01
        %Z 시간대 출력 - 대한민국 표준시
            ex) print(time.strftime('%Y %m %d %X')) -> 2021 04 14 13:14:07
                print(time.strftime('%Y %m %d %X', time.localtime(time.time())))  위와 같은 코드
    time.sleep : 루프문 안에서 자주 사용됨. 일정한 시간 간격을 주기 위해 사용, 초단위임 ms아님
import datetime  # time 모듈 기반으로 편하게 사용하도록
    datetime.date.today() - date 밑에 함수들 있음
import calendar  # 파이선에서 달력을 표시해주는 모듈
    calendar.calendar(2021) - 해당 년도의 전체 달력을 출력
    calendar.prcal(해당년도) - 해당년도의 전체 달력을 출력, 위의 calendar와 달리 print를 안써도 출력
    calendar.prmonth(년도, 월) - 해당년도의 월만 출력
    calendar.weekday(년도, 월, 일) - 입력받은 날짜의 요일을 반환
    calendar.monthrange(년도, 월) - 입력받은 달의 1일이 무슨 요일인지를 출력 후, 그 달의 마지막 일자 반환(튜플)
import random  # 난수 발생 모듈
    random.random() - 0.0~1.0 실수
import webbrowser  # 자신의 시스템에서 사용하는 기본 웹브라우저가 자동으로 실행되게 하는 모듈
    webbrowser.open('http:/www.example.com')
    webbrowser.open_new_tab('http:/www.example.com')
import urllib.request       # 서버에서 봇이 계속 정보를 가져와야 크롤링?, 수동개념으로 작업하면 스크래핑
                            # urllib의 request 요청객체(웹브라우저로부터 요청)
    urllib.request.urlopen(url).read().decode('utf-8') - url열고 읽고 인코딩까지
        => moduleEx02.py에서 웹에서 정보를 가져오는 함수와 그 동작 참고

# java는 객체와 클래스가 같은데
# 파이선은 객체 안에 클래스가 있는 형태
    특정 함수나 클래스만 불러오기
    from <모듈명> import <함수명>     from calculator import add  ->  이미 모듈을 호출한것이므로 calculator를 안쓰고 함수만 호출가능
                                     from calculator import *

파이선 패키지와 디렉토리 - 둘다 계층 나눔, 차이는 거의 없으나 디렉토리와 패키지를 구분하는 표시가 존재
    디렉토리는 모아두는 용도, 경로만 생성, 디렉토리로 생성해도 __init__.py를 그 안에 생성하면 패키지가 된다.
    패키지는 __init__.py가 경로에 자동생성됨, 설정 파일인듯

[210415]
# dictionary : {name1 : value1, name2 : value2, ...}
    name1으로 value1을 출력가능
    name에는 리스트를 사용할 수 없지만 값에는 리스트 사용 가능
    수정 - 리스트와 비슷(단, 인덱스가 아닌 이름을 호출해서 수정)
    추가시 새로운 name과 value 넣어주면 됨 ex) dict['four'] = 4
    삭제 (del, pop : del과 같은 동작이지만 무엇을 없앴는지 리턴함)

    출력 순서가 다를 수 있다.
        리스트는 인덱스가 있으니까 순서가 존재하지만 
        딕셔너리는 key가 있고 순서가 필요없으니 항상 같은 순서로 출력될 보장이 없다.
        순서가 중요한 경우라면 딕셔너리가 아닌 리스트를 사용해야 함

# tuple : 순서가 있는 값의 집합이고 한 번 만들고 나서 변경을 최소화 하고 싶을 때 사용
    리스트는 대괄호, 딕셔버리는 중괄호, 튜플은 소괄호
    튜플을 만들 때 핵심은 소괄호 아님. 콤마에 유의, 콤마를 찍으면 튜플로 인식
    튜플을 리스트로도 생성 가능
    리스트처럼 인덱스 번호 이용해서 인덱싱 가능

    튜플의 값을 변경하려고 하면 TypeError가 발생
    튜플은 순서와 값을 모두 고정하고 있기 때문, 바꾸려는 시도 거부
    수정, 삭제(del, pop) 모두 쓸 수 없음

    이렇게 제약이 있음에도 튜플을 사용하는 이유
    1) 두 변수의 값을 맞바꿀 때 사용
    2) 여러 개의 값을 한꺼번에 전달하고 싶을 때 사용
    3) 딕셔너리는 key에 따라 value를 찾아오므로 key가 매번 바뀌면 곤란
        - key에도 값을 여러개 넣고 싶다면? key를 고정할 수 있으면 가능

    튜플을 이용해서 변수 하나에 여러 값을 여러 개 대입할 수 있음
    - 패킹 : 하나의 변수에 여러 개의 값을 대입
    - 언패킹 : 패킹된 변수에서 여러 개의 값을 꺼내오는 것

    맞바꿈, 리스트나 딕셔너리 출력등 여러 사용에 있어 장점이 있음

# file 파일 입출력
    open(file, mode, , ...)
    첫 번째 파라미터(file) : 파일의 상대경로
    두 번째 파라미터(mode) : 파일을 여는 모드 옵션
     - r : 기본값. 읽기 전용
     - w : 파일 쓰기. 파일이 이미 존재한다면 해당 파일을 비움
     - x : 배타적 생성. 파일이 이미 존재한다면 opne() 실패
     - a : 파일 쓰기. 파일이 이미 존재한다면 파일의 끝에 내용을 덧붙임
     - b : 바이너리 모드로 열기
     - t : 텍스트 모드로 열기
     - + : 읽기와 쓰기를 모두 다
    캐시 사용?
    엔코딩도 추가 가능
    
    file 객체 
        자바 io는 while 안에서 끝을 찾을 때 까지 한줄씩 읽어야 했음
        파이선은 처음 open을 하면 자동으로 이터레이팅 함, 자동으로 읽고있음

        file 객체는 순회가능(iterator)하므로 for 문에 리스트 대신 바로 file 객체를 넣을 수 있음
    
        파일을 읽고 닫지 않으면 화면에 출력이 안되었으나 지금은 출력을 해줌 - 닫는게 권장

# 예외 처리
    파이선은 컴파일 언어가 아니라서 에디터가 오류를 안잡아줌(인터프리터 언어), exception 처리 중요
     - 예외 : 프로그램에서 벌어지는 예외적인 상황(에러)을 의미
     - ex) FileNotFoundError (파일이 없을 때)
           ZeroDivisionError (숫자를 0으로 나눌 때 에러)
           IndexError (리스트에서 얻어 올 수 없는 값일 경우 에러)
           SyntaxError (문법, 구문 오류)
           EOFError (파일의 끝일 경우, 더 이상 읽을 내용 없을 경우)
           ValueError (캐스팅 오류, type error)
           TypeError
           ...
     - 기본 형식
         try :
            수행 명령
         except [발생에러[as 에러메시지 변수]] :
            수행 명령
     - if 구문으로도 직접 처리 가능
     - except 중첩 가능, 에러 아닌경우 -> else 사용 가능, finally 사용 가능
            try:
                str = input('문자를 입력하세요 : ')
            except EOFError:
                print('읽은 내용이 없습니다.')
            except KeyboardInterrupt:
                print('입력 취소되었습니다.')
            else:
                print('except가 아닌 나머지 - {}'.format(str))
            finally:
                print('개의치 않고 실행')
    pass 구문 : 파이선은 비어있는 클래스를 만들 수 없다. 뭐라도 넣어야 하는데 틀만 만들고 나중에 작업할때 사용
               에러가 발생하여 except로 들어갈 경우 통과시키기 위한 구문
    - 가장 상위의 에러를 사용해서 어떤 오류가 나는지 받아올 수 있다.
        try:
            list = []
            print(list[0])
        except Exception as ex:  # 이렇게 별칭을 선언해두면 어떤 오류인지 받을 수 있다.
            print('오류 발생', ex)

































































----------------------------------------------------------------------------------------------------------------------------------------
[210412]
<basic> 경로
varEx.py                    파이선 동적 타이핑 언어 특징
numberEx.py                 자료형, **로 제곱 승 수, //로 몪 구하기 
[210413]
<basic> 경로
stringFunction.py           문자개수(count), 위치찾기(find), 위치찾기2(index,못찾으면 에러), 문자열 삽입(join)
                            소문자>대문자(upper), 대문자>소문자(lower), 공백지우기(strip, lstrip, rstrip) 
                            문자열바꾸기(replace), 문자열나누기(split)
ifBasic.py                  if문, 들여쓰기의 중요성->코드 블록, 논리 연산자(True, False)
                            콘솔로입력받기(input()), 
forBasic.py                 for 반복문, 반복문에 사용되는 range(a, b) : a이상 b미만
forBasic2.py                다중 반복문
whileBasic.py               while 반복문, 무한 루프 조심
breakEx.py                  반복문 중 break, continue
<list> 경로
listEx01.py                 리스트에 들어갈 수 있는 요소들, 리스트 인덱싱, 리스트 슬라이싱, 연산, 반복, 수정, 삭제(del)
listEx02.py                 리스트 관련 함수들
                            요소추가(append), 정렬(sort), 역정렬(reverse) 알파벳 역순(내림차순)이 아니고 있던 그대로의 역순서임에 유의
                            위치반환(index), 요소삽입(insert), 요소제거(remove), 요소추출(pop), 요소갯수(count), 리스트확장(extend, +=)
[210414]                    (listEx02.py 도 수정)
<list> 경로
forinList.py                for in list, for in range, 리스트 크기 변경 고려시 len(리스트) 사용(range에서), enumrate
<function> 경로
functionEx01                함수 구조1, 2
functionEx02                함수 구조3
<module_1> 경로
moduleEx01.py               모듈     import math, sys, os, shutil, time
moduleEx02.py               모듈2    import datetime, calendar, random, webbrowser, urllib.request
<module_2> 경로
diva.py                     파일 상단에 # coding: utf-8 => utf-8로 설정, 클래스, 생성자, 내부 함수 정의(사용자 정의 모듈 생성)
moduleMain.py               diva 클래스 테스트, 클래스 호출, 호출 때 오류가 나면 소스로 바꾸면 된다??
calculator.py               diva는 클래스였고 이 calculator는 함수(기능)만 모아둔 모듈
moduleMain2.py              calculator 사용자 정의 모듈 테스트, 밑의 이름 긴 모듈을 호출할때 이름을 짧게 다른 이름(별칭)으로 호출
thisisVeryLongNameModule.py 모듈 이름을 호출시 별칭으로 바꾸는 테스트용 모듈
<package> 패키지             패키지를 생성하면 경로에 자동으로 __init__.py 생성됨
package\cal\calculator2.py  minus만 만들어둔 모듈
package\cal\calMain.py      패키지는 도트.로 관리하므로 현재 패키지 내의 모듈(.calculator2)를 import, 도트를 사용해서 명확하게 지정 가능
                            위의 방식대로 상대주소로 import 실패, 절대주소 사용
<exam> 경로
randomLike.py               랜덤연습, random.choice(), shuffle, math.random()등
[210415] 
<dictionary> 경로
dic_basic.py                dictionary, 가위바위보 승패, value에 리스트
dic_modify.py               리스트와 딕셔너리의 수정(by index/name), 추가(append/by name, value), 삭제(del)
                            pop : del과 같은 동작이지만 무엇을 없앴는지 리턴함
dic_loop.py                 루프를 사용해서 key, value 만 출력, key를 가져와서 value와 같이 출력, items()를 사용해서 키와 값 모두 불러옴
<tuple> 경로
tuple_basic.py              tuple, 설명
tuple_ex.py                 튜플을 사용하는 예시들, 맞바꿈, 리스트에서, 딕셔너리에서
<file> 경로
fileEx.py                   파일 입출력, 먼저 good.txt 파일 생성해서 file 경로 안에 두기
                            파일전체읽기(read), 한줄읽기(readline), 파일전체읽고 리스트로 리턴(readlines), 닫기(close) - 권장
                            file 객체는 순회가능(iterator)하므로 for 문에 리스트 대신 바로 file 객체를 넣을 수 있음
                            한글을 쓸거면 UTF8로 저장하는게 편함
                            with구문, 파일을 열고 닫는 과정을 자동으로 해주고 그 과정에서 오류가 발생하면 알아서 처리
<except>
except_basic.py             파이선은 컴파일 언어가 아니라서 에디터가 오류를 안잡아줌(인터프리터 언어), exception 처리 중요
exceptEx.py                 에러 처리
                            어떤 오류인지 명확하지 않을 때 일단 except 열어둘 수 있음, 잡아는 주지만 어떤 오류인지 모름
                            가장 상위의 에러를 사용해서 별칭을 선언해두면 어떤 오류인지 받을 수 있다.
exception_debug.py          함수나 모듈을 생성 시 디버깅을 먼저 해보기 위해서 오류를 일으켜 볼 수도 있음
                            raise를 사용해서 오류를 일부러 발생시킴, raise StopIteration -> 반복을 멈추게 하는 오류
                            오류를 활용하여 반복문을 멈추고 그 다름 로직을 실행하도록 하는 방식











































































































































